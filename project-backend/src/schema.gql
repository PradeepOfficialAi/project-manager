# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateDashboard {
  created: DateTime
  dashboardArray: JSON
  dashboardId: String
  dashboardProjectId: String
  id: ID
  updated: DateTime
}

input CreateEmployee {
  created: DateTime
  employeAddress: String
  employeCode: String
  employeDesignation: String
  employeEmail: String
  employeName: String
  id: ID
  updated: DateTime
}

input CreateManyDashboardsInput {
  """Array of records to create"""
  dashboards: [CreateDashboard!]!
}

input CreateManyEmployeesInput {
  """Array of records to create"""
  employees: [CreateEmployee!]!
}

input CreateManyProjectsInput {
  """Array of records to create"""
  projects: [CreateProject!]!
}

input CreateManyTasksInput {
  """Array of records to create"""
  tasks: [CreateTask!]!
}

input CreateOneDashboardInput {
  """The record to create"""
  dashboard: CreateDashboard!
}

input CreateOneEmployeeInput {
  """The record to create"""
  employee: CreateEmployee!
}

input CreateOneProjectInput {
  """The record to create"""
  project: CreateProject!
}

input CreateOneTaskInput {
  """The record to create"""
  task: CreateTask!
}

input CreateProject {
  created: DateTime
  endDate: DateTime
  id: ID
  projectDevelopers: [String!]
  projectLeaderId: Int
  projectName: String
  startDate: DateTime
  updated: DateTime
}

input CreateTask {
  created: DateTime
  dashboardTaskId: String
  endDate: DateTime
  id: ID
  projectNameId: Int
  startDate: DateTime
  taskDevelopers: [String!]
  taskName: String
  updated: DateTime
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

type Dashboard {
  created: DateTime!
  dashboardArray: JSON
  dashboardId: String!
  dashboardProjectId: String!
  id: ID!
  updated: DateTime!
}

type DashboardAggregateGroupBy {
  dashboardId: String
  dashboardProjectId: String
  id: ID
}

type DashboardAvgAggregate {
  id: Float
}

type DashboardConnection {
  """Array of edges."""
  edges: [DashboardEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type DashboardCountAggregate {
  dashboardId: Int
  dashboardProjectId: Int
  id: Int
}

input DashboardDeleteFilter {
  and: [DashboardDeleteFilter!]
  dashboardId: StringFieldComparison
  dashboardProjectId: StringFieldComparison
  id: IDFilterComparison
  or: [DashboardDeleteFilter!]
}

type DashboardDeleteResponse {
  created: DateTime
  dashboardArray: JSON
  dashboardId: String
  dashboardProjectId: String
  id: ID
  updated: DateTime
}

type DashboardEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Dashboard"""
  node: Dashboard!
}

input DashboardFilter {
  and: [DashboardFilter!]
  dashboardId: StringFieldComparison
  dashboardProjectId: StringFieldComparison
  id: IDFilterComparison
  or: [DashboardFilter!]
}

type DashboardMaxAggregate {
  dashboardId: String
  dashboardProjectId: String
  id: ID
}

type DashboardMinAggregate {
  dashboardId: String
  dashboardProjectId: String
  id: ID
}

input DashboardSort {
  direction: SortDirection!
  field: DashboardSortFields!
  nulls: SortNulls
}

enum DashboardSortFields {
  dashboardId
  dashboardProjectId
  id
}

type DashboardSumAggregate {
  id: Float
}

input DashboardUpdateFilter {
  and: [DashboardUpdateFilter!]
  dashboardId: StringFieldComparison
  dashboardProjectId: StringFieldComparison
  id: IDFilterComparison
  or: [DashboardUpdateFilter!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyDashboardsInput {
  """Filter to find records to delete"""
  filter: DashboardDeleteFilter!
}

input DeleteManyEmployeesInput {
  """Filter to find records to delete"""
  filter: EmployeeDeleteFilter!
}

input DeleteManyProjectsInput {
  """Filter to find records to delete"""
  filter: ProjectDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyTasksInput {
  """Filter to find records to delete"""
  filter: TaskDeleteFilter!
}

input DeleteOneDashboardInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneEmployeeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProjectInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTaskInput {
  """The id of the record to delete."""
  id: ID!
}

type Employee {
  created: DateTime
  employeAddress: String
  employeCode: String
  employeDesignation: String
  employeEmail: String
  employeName: String
  id: ID!
  updated: DateTime
}

type EmployeeAggregateGroupBy {
  employeAddress: String
  employeCode: String
  employeDesignation: String
  employeEmail: String
  employeName: String
  id: ID
}

type EmployeeAvgAggregate {
  id: Float
}

type EmployeeConnection {
  """Array of edges."""
  edges: [EmployeeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type EmployeeCountAggregate {
  employeAddress: Int
  employeCode: Int
  employeDesignation: Int
  employeEmail: Int
  employeName: Int
  id: Int
}

input EmployeeDeleteFilter {
  and: [EmployeeDeleteFilter!]
  employeAddress: StringFieldComparison
  employeCode: StringFieldComparison
  employeDesignation: StringFieldComparison
  employeEmail: StringFieldComparison
  employeName: StringFieldComparison
  id: IDFilterComparison
  or: [EmployeeDeleteFilter!]
}

type EmployeeDeleteResponse {
  created: DateTime
  employeAddress: String
  employeCode: String
  employeDesignation: String
  employeEmail: String
  employeName: String
  id: ID
  updated: DateTime
}

type EmployeeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Employee"""
  node: Employee!
}

input EmployeeFilter {
  and: [EmployeeFilter!]
  employeAddress: StringFieldComparison
  employeCode: StringFieldComparison
  employeDesignation: StringFieldComparison
  employeEmail: StringFieldComparison
  employeName: StringFieldComparison
  id: IDFilterComparison
  or: [EmployeeFilter!]
}

type EmployeeMaxAggregate {
  employeAddress: String
  employeCode: String
  employeDesignation: String
  employeEmail: String
  employeName: String
  id: ID
}

type EmployeeMinAggregate {
  employeAddress: String
  employeCode: String
  employeDesignation: String
  employeEmail: String
  employeName: String
  id: ID
}

input EmployeeSort {
  direction: SortDirection!
  field: EmployeeSortFields!
  nulls: SortNulls
}

enum EmployeeSortFields {
  employeAddress
  employeCode
  employeDesignation
  employeEmail
  employeName
  id
}

type EmployeeSumAggregate {
  id: Float
}

input EmployeeUpdateFilter {
  and: [EmployeeUpdateFilter!]
  employeAddress: StringFieldComparison
  employeCode: StringFieldComparison
  employeDesignation: StringFieldComparison
  employeEmail: StringFieldComparison
  employeName: StringFieldComparison
  id: IDFilterComparison
  or: [EmployeeUpdateFilter!]
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

input IntFieldComparison {
  between: IntFieldComparisonBetween
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  is: Boolean
  isNot: Boolean
  lt: Int
  lte: Int
  neq: Int
  notBetween: IntFieldComparisonBetween
  notIn: [Int!]
}

input IntFieldComparisonBetween {
  lower: Int!
  upper: Int!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createManyDashboards(input: CreateManyDashboardsInput!): [Dashboard!]!
  createManyEmployees(input: CreateManyEmployeesInput!): [Employee!]!
  createManyProjects(input: CreateManyProjectsInput!): [Project!]!
  createManyTasks(input: CreateManyTasksInput!): [Task!]!
  createOneDashboard(input: CreateOneDashboardInput!): Dashboard!
  createOneEmployee(input: CreateOneEmployeeInput!): Employee!
  createOneProject(input: CreateOneProjectInput!): Project!
  createOneTask(input: CreateOneTaskInput!): Task!
  deleteManyDashboards(input: DeleteManyDashboardsInput!): DeleteManyResponse!
  deleteManyEmployees(input: DeleteManyEmployeesInput!): DeleteManyResponse!
  deleteManyProjects(input: DeleteManyProjectsInput!): DeleteManyResponse!
  deleteManyTasks(input: DeleteManyTasksInput!): DeleteManyResponse!
  deleteOneDashboard(input: DeleteOneDashboardInput!): DashboardDeleteResponse!
  deleteOneEmployee(input: DeleteOneEmployeeInput!): EmployeeDeleteResponse!
  deleteOneProject(input: DeleteOneProjectInput!): ProjectDeleteResponse!
  deleteOneTask(input: DeleteOneTaskInput!): TaskDeleteResponse!
  removeProjectLeaderFromProject(input: RemoveProjectLeaderFromProjectInput!): Project!
  removeProjectNameFromTask(input: RemoveProjectNameFromTaskInput!): Task!
  setProjectLeaderOnProject(input: SetProjectLeaderOnProjectInput!): Project!
  setProjectNameOnTask(input: SetProjectNameOnTaskInput!): Task!
  updateManyDashboards(input: UpdateManyDashboardsInput!): UpdateManyResponse!
  updateManyEmployees(input: UpdateManyEmployeesInput!): UpdateManyResponse!
  updateManyProjects(input: UpdateManyProjectsInput!): UpdateManyResponse!
  updateManyTasks(input: UpdateManyTasksInput!): UpdateManyResponse!
  updateOneDashboard(input: UpdateOneDashboardInput!): Dashboard!
  updateOneEmployee(input: UpdateOneEmployeeInput!): Employee!
  updateOneProject(input: UpdateOneProjectInput!): Project!
  updateOneTask(input: UpdateOneTaskInput!): Task!
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type Project {
  created: DateTime
  endDate: DateTime
  id: ID!
  projectDevelopers: [String!]
  projectLeader: Employee
  projectLeaderId: Int
  projectName: String
  startDate: DateTime
  updated: DateTime
}

type ProjectAggregateGroupBy {
  id: ID
  projectLeaderId: Int
  projectName: String
}

type ProjectAvgAggregate {
  id: Float
  projectLeaderId: Float
}

type ProjectConnection {
  """Array of edges."""
  edges: [ProjectEdge!]!

  """Paging information"""
  pageInfo: PageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProjectCountAggregate {
  id: Int
  projectLeaderId: Int
  projectName: Int
}

input ProjectDeleteFilter {
  and: [ProjectDeleteFilter!]
  id: IDFilterComparison
  or: [ProjectDeleteFilter!]
  projectLeaderId: IntFieldComparison
  projectName: StringFieldComparison
}

type ProjectDeleteResponse {
  created: DateTime
  endDate: DateTime
  id: ID
  projectDevelopers: [String!]
  projectLeaderId: Int
  projectName: String
  startDate: DateTime
  updated: DateTime
}

type ProjectEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Project"""
  node: Project!
}

input ProjectFilter {
  and: [ProjectFilter!]
  id: IDFilterComparison
  or: [ProjectFilter!]
  projectLeaderId: IntFieldComparison
  projectName: StringFieldComparison
}

type ProjectMaxAggregate {
  id: ID
  projectLeaderId: Int
  projectName: String
}

type ProjectMinAggregate {
  id: ID
  projectLeaderId: Int
  projectName: String
}

input ProjectSort {
  direction: SortDirection!
  field: ProjectSortFields!
  nulls: SortNulls
}

enum ProjectSortFields {
  id
  projectLeaderId
  projectName
}

type ProjectSumAggregate {
  id: Float
  projectLeaderId: Float
}

input ProjectUpdateFilter {
  and: [ProjectUpdateFilter!]
  id: IDFilterComparison
  or: [ProjectUpdateFilter!]
  projectLeaderId: IntFieldComparison
  projectName: StringFieldComparison
}

type Query {
  dashboard(
    """The id of the record to find."""
    id: ID!
  ): Dashboard
  dashboards(
    """Specify to filter the records returned."""
    filter: DashboardFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [DashboardSort!] = []
  ): DashboardConnection!
  employee(
    """The id of the record to find."""
    id: ID!
  ): Employee
  employees(
    """Specify to filter the records returned."""
    filter: EmployeeFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [EmployeeSort!] = []
  ): EmployeeConnection!
  project(
    """The id of the record to find."""
    id: ID!
  ): Project
  projects(
    """Specify to filter the records returned."""
    filter: ProjectFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [ProjectSort!] = []
  ): ProjectConnection!
  task(
    """The id of the record to find."""
    id: ID!
  ): Task
  tasks(
    """Specify to filter the records returned."""
    filter: TaskFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [TaskSort!] = []
  ): TaskConnection!
}

input RemoveProjectLeaderFromProjectInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveProjectNameFromTaskInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetProjectLeaderOnProjectInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetProjectNameOnTaskInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

type Task {
  created: DateTime
  dashboardTaskId: String!
  endDate: DateTime
  id: ID!
  projectName: Project
  projectNameId: Int
  startDate: DateTime
  taskDevelopers: [String!]
  taskName: String
  updated: DateTime
}

type TaskAggregateGroupBy {
  dashboardTaskId: String
  id: ID
  projectNameId: Int
  taskName: String
}

type TaskAvgAggregate {
  id: Float
  projectNameId: Float
}

type TaskConnection {
  """Array of edges."""
  edges: [TaskEdge!]!

  """Paging information"""
  pageInfo: PageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type TaskCountAggregate {
  dashboardTaskId: Int
  id: Int
  projectNameId: Int
  taskName: Int
}

input TaskDeleteFilter {
  and: [TaskDeleteFilter!]
  dashboardTaskId: StringFieldComparison
  id: IDFilterComparison
  or: [TaskDeleteFilter!]
  projectNameId: IntFieldComparison
  taskName: StringFieldComparison
}

type TaskDeleteResponse {
  created: DateTime
  dashboardTaskId: String
  endDate: DateTime
  id: ID
  projectNameId: Int
  startDate: DateTime
  taskDevelopers: [String!]
  taskName: String
  updated: DateTime
}

type TaskEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Task"""
  node: Task!
}

input TaskFilter {
  and: [TaskFilter!]
  dashboardTaskId: StringFieldComparison
  id: IDFilterComparison
  or: [TaskFilter!]
  projectNameId: IntFieldComparison
  taskName: StringFieldComparison
}

type TaskMaxAggregate {
  dashboardTaskId: String
  id: ID
  projectNameId: Int
  taskName: String
}

type TaskMinAggregate {
  dashboardTaskId: String
  id: ID
  projectNameId: Int
  taskName: String
}

input TaskSort {
  direction: SortDirection!
  field: TaskSortFields!
  nulls: SortNulls
}

enum TaskSortFields {
  dashboardTaskId
  id
  projectNameId
  taskName
}

type TaskSumAggregate {
  id: Float
  projectNameId: Float
}

input TaskUpdateFilter {
  and: [TaskUpdateFilter!]
  dashboardTaskId: StringFieldComparison
  id: IDFilterComparison
  or: [TaskUpdateFilter!]
  projectNameId: IntFieldComparison
  taskName: StringFieldComparison
}

input UpdateDashboard {
  created: DateTime
  dashboardArray: JSON
  dashboardId: String
  dashboardProjectId: String
  id: ID
  updated: DateTime
}

input UpdateEmployee {
  created: DateTime
  employeAddress: String
  employeCode: String
  employeDesignation: String
  employeEmail: String
  employeName: String
  id: ID
  updated: DateTime
}

input UpdateManyDashboardsInput {
  """Filter used to find fields to update"""
  filter: DashboardUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDashboard!
}

input UpdateManyEmployeesInput {
  """Filter used to find fields to update"""
  filter: EmployeeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateEmployee!
}

input UpdateManyProjectsInput {
  """Filter used to find fields to update"""
  filter: ProjectUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProject!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyTasksInput {
  """Filter used to find fields to update"""
  filter: TaskUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTask!
}

input UpdateOneDashboardInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDashboard!
}

input UpdateOneEmployeeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateEmployee!
}

input UpdateOneProjectInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProject!
}

input UpdateOneTaskInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTask!
}

input UpdateProject {
  created: DateTime
  endDate: DateTime
  id: ID
  projectDevelopers: [String!]
  projectLeaderId: Int
  projectName: String
  startDate: DateTime
  updated: DateTime
}

input UpdateTask {
  created: DateTime
  dashboardTaskId: String
  endDate: DateTime
  id: ID
  projectNameId: Int
  startDate: DateTime
  taskDevelopers: [String!]
  taskName: String
  updated: DateTime
}
